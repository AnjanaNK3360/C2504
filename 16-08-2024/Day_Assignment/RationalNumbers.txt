
////Rational Number Substraction

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RatNumSub
{
    class MyUtil
    {
        public static int FindGCD(int a, int b)
        {
            while (a != b)
            {
                if (a > b)
                    a -= b;
                else
                    b -= a;
            }
            return a;
        }
    }
    class RationalNumber
    {
        public int Numerator { get; set; }
        private int denominator;
        public int Denominator
        {
            get
            {
                return denominator;
            }
            set
            {
                if (denominator == 0)
                {
                    denominator = 1;
                }
                denominator = value;
            }
        }

        public RationalNumber(int _numerator, int _denominator)
        {

            if (_denominator == 0)
            {
                _denominator = 1;
            }
            this.Numerator = _numerator;
            this.Denominator = _denominator;
        }
        public RationalNumber Sub(RationalNumber other)
        {
            RationalNumber diff = new RationalNumber(0, 0);
            diff.Numerator = (this.Numerator * other.Denominator) - (other.Numerator * this.Denominator);
            diff.Denominator = this.Denominator * other.Denominator;

            int gcd = MyUtil.FindGCD(diff.Numerator, diff.Denominator);
            diff.Numerator = diff.Numerator / gcd;
            diff.Denominator = diff.Denominator / gcd;
            return diff;
        }

        public override string ToString()
        {
            return $"[{Numerator} / {Denominator}]";
        }

    }
    internal class Program
    {
        static void Main(string[] args)
        {
            RationalNumber firstNo = new RationalNumber(1, 2);
            RationalNumber secondNo = new RationalNumber(1, 4);
            RationalNumber result = firstNo.Sub(secondNo);
            Console.WriteLine($"{firstNo} - {secondNo} = {result}");

        }
    }
}


-------------------------------------------------------------------
////// /Rational Numbers Multiply

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RatNumMultiply
{
   

    class MyUtil
    {
        public static int FindGCD(int a, int b)
        {
            while (a != b)
            {
                if (a > b)
                    a -= b;
                else
                    b -= a;
            }
            return a;
        }
    }
    class RationalNumber
    {
        public int Numerator { get; set; }
        private int denominator;
        public int Denominator
        {
            get
            {
                return denominator;
            }
            set
            {
                if (denominator == 0)
                {
                    denominator = 1;
                }
                denominator = value;
            }
        }

        public RationalNumber(int _numerator, int _denominator)
        {

            if (_denominator == 0)
            {
                _denominator = 1;
            }
            this.Numerator = _numerator;
            this.Denominator = _denominator;
        }
        public RationalNumber Mul(RationalNumber other)
        {
            RationalNumber product = new RationalNumber(0, 0);
            product.Numerator = this.Numerator * other.Numerator;
            product.Denominator = this.Denominator * other.Denominator;

            int gcd = MyUtil.FindGCD(product.Numerator, product.Denominator);
            product.Numerator = product.Numerator / gcd;
            product.Denominator = product.Denominator / gcd;
            return product;
        }

        public override string ToString()
        {
            return $"[{Numerator} / {Denominator}]";
        }

    }
    internal class Program
    {
        static void Main(string[] args)
        {
            RationalNumber firstNo = new RationalNumber(3, 2);
            RationalNumber secondNo = new RationalNumber(2, 4);
            RationalNumber result = firstNo.Mul(secondNo);
            Console.WriteLine($"{firstNo} * {secondNo} = {result}");

        }
    }
}

-----------------------------------------------------------------
//////Rational number Equals

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RatNumEquals
{
    class MyUtil
    {
        public static int FindGCD(int a, int b)
        {
            while (a != b)
            {
                if (a > b)
                    a -= b;
                else
                    b -= a;
            }
            return a;
        }
    }
    class RationalNumber
    {
        public int Numerator { get; set; }
        private int denominator;
        public int Denominator
        {
            get
            {
                return denominator;
            }
            set
            {
                if (denominator == 0)
                {
                    denominator = 1;
                }
                denominator = value;
            }
        }

        public RationalNumber(int _numerator, int _denominator)
        {

            if (_denominator == 0)
            {
                _denominator = 1;
            }
            this.Numerator = _numerator;
            this.Denominator = _denominator;
        }
        public bool IsEqual(RationalNumber other)
        {
            return this.Numerator == other.Numerator && this.Denominator == other.Denominator;
        }

        public override string ToString()
        {
            return $"[{Numerator} / {Denominator}]";
        }

    }
    internal class Program
    {
        static void Main(string[] args)
        {
            RationalNumber firstNo = new RationalNumber(3, 4);
            RationalNumber secondNo = new RationalNumber(3, 4);

            if (firstNo.IsEqual(secondNo))
            {
                Console.WriteLine($"Rational number 1 {firstNo} is equal to Rational number 2 {secondNo}");
            }
            else
            {
                Console.WriteLine($"Rational number 1 {firstNo} is not equal to Rational number 2 {secondNo}");
            }

        }
    }
}
------------------------------------------------------------
////////Rational Number Lt

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RatNumLT
{
   
    class MyUtil
    {
        public static int FindGCD(int a, int b) //HCF
        {
            while (a != b)
            {
                if (a > b)
                    a -= b;
                else
                    b -= a;
            }
            return a;
        }
    }
    class RationalNumber
    {
        public int Numerator { get; set; }
        private int denominator;
        public int Denominator
        {
            get
            {
                return denominator;
            }
            set
            {
                if (denominator == 0)
                {
                    denominator = 1;
                }
                denominator = value;
            }
        }

        public RationalNumber(int _numerator, int _denominator)
        {
            // throw ERR this.Denominator = 0
            if (_denominator == 0)
            {
                _denominator = 1;
            }
            this.Numerator = _numerator;
            this.Denominator = _denominator;
        }
        public bool IsGreater(RationalNumber other)
        {
            return this.Numerator * other.Denominator < other.Numerator * this.Denominator;
        }

        public override string ToString()
        {
            return $"[{Numerator} / {Denominator}]";
        }

    }
    internal class Program
    {
        static void Main(string[] args)
        {
            RationalNumber firstNo = new RationalNumber(3, 4);
            RationalNumber secondNo = new RationalNumber(2, 4);

            if (firstNo.IsGreater(secondNo))
            {
                Console.WriteLine($"Rational number 1 {firstNo} is less than Rational number 2 {secondNo}");
            }
            else
            {
                Console.WriteLine($"Rational number 1 {firstNo} is not less than Rational number 2 {secondNo}");
            }

        }
    }
}

-----------------------------------------------------------------
////// Rational Number Lte

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RatNumLte
{


    class MyUtil
    {
        public static int FindGCD(int a, int b)
        {
            while (a != b)
            {
                if (a > b)
                    a -= b;
                else
                    b -= a;
            }
            return a;
        }
    }
    class RationalNumber
    {
        public int Numerator { get; set; }
        private int denominator;
        public int Denominator
        {
            get
            {
                return denominator;
            }
            set
            {
                if (denominator == 0)
                {
                    denominator = 1;
                }
                denominator = value;
            }
        }

        public RationalNumber(int _numerator, int _denominator)
        {

            if (_denominator == 0)
            {
                _denominator = 1;
            }
            this.Numerator = _numerator;
            this.Denominator = _denominator;
        }
        public bool IsLessThanOrEqual(RationalNumber other)
        {
            return (Numerator * other.Denominator) <= (other.Numerator * Denominator);
        }


        public override string ToString()
        {
            return $"[{Numerator} / {Denominator}]";
        }

    }
    internal class Program
    {
        static void Main(string[] args)
        {
            RationalNumber firstNo = new RationalNumber(3, 4);
            RationalNumber secondNo = new RationalNumber(2, 4);

            if (firstNo.IsLessThanOrEqual(secondNo))
            {
                Console.WriteLine($"Rational number 1 {firstNo} is less than or equal to Rational number 2 {secondNo}");
            }
            else
            {
                Console.WriteLine($"Rational number 1 {firstNo} is not less than or equal to Rational number 2 {secondNo}");
            }

        }
    }
}

--------------------------------------------------------
 ///////Rational Number Gt

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RatNumGT
{

    class MyUtil
    {
        public static int FindGCD(int a, int b)
        {
            while (a != b)
            {
                if (a > b)
                    a -= b;
                else
                    b -= a;
            }
            return a;
        }
    }
    class RationalNumber
    {
        public int Numerator { get; set; }
        private int denominator;
        public int Denominator
        {
            get
            {
                return denominator;
            }
            set
            {
                if (denominator == 0)
                {
                    denominator = 1;
                }
                denominator = value;
            }
        }

        public RationalNumber(int _numerator, int _denominator)
        {

            if (_denominator == 0)
            {
                _denominator = 1;
            }
            this.Numerator = _numerator;
            this.Denominator = _denominator;
        }
        public bool IsGreater(RationalNumber other)
        {
            return this.Numerator * other.Denominator > other.Numerator * this.Denominator;
        }

        public override string ToString()
        {
            return $"[{Numerator} / {Denominator}]";
        }

    }
    internal class Program
    {
        static void Main(string[] args)
        {
            RationalNumber firstNo = new RationalNumber(3, 4);
            RationalNumber secondNo = new RationalNumber(2, 4);

            if (firstNo.IsGreater(secondNo))
            {
                Console.WriteLine($"Rational number 1 {firstNo} is greater than Rational number 2 {secondNo}");
            }
            else
            {
                Console.WriteLine($"Rational number 1 {firstNo} is not greater than Rational number 2 {secondNo}");
            }

        }
    }
}

---------------------------------------------------

//////Rational Number Gte

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RatNumGte
{

    class MyUtil
    {
        public static int FindGCD(int a, int b)
        {
            while (a != b)
            {
                if (a > b)
                    a -= b;
                else
                    b -= a;
            }
            return a;
        }
    }
    class RationalNumber
    {
        public int Numerator { get; set; }
        private int denominator;
        public int Denominator
        {
            get
            {
                return denominator;
            }
            set
            {
                if (denominator == 0)
                {
                    denominator = 1;
                }
                denominator = value;
            }
        }

        public RationalNumber(int _numerator, int _denominator)
        {
            // throw ERR this.Denominator = 0
            if (_denominator == 0)
            {
                _denominator = 1;
            }
            this.Numerator = _numerator;
            this.Denominator = _denominator;
        }
        public bool IsGreaterOrEqual(RationalNumber other)
        {
            return (Numerator * other.Denominator) >= (other.Numerator * Denominator);
        }

        public override string ToString()
        {
            return $"[{Numerator} / {Denominator}]";
        }

    }
    internal class Program
    {
        static void Main(string[] args)
        {
            RationalNumber firstNo = new RationalNumber(3, 4);
            RationalNumber secondNo = new RationalNumber(2, 4);

            if (firstNo.IsGreaterOrEqual(secondNo))
            {
                Console.WriteLine($"Rational number 1 {firstNo} is greater than or equal to Rational number 2 {secondNo}");
            }
            else
            {
                Console.WriteLine($"Rational number 1 {firstNo} is not greater than or equal to Rational number 2 {secondNo}");
            }

        }
    }
}




