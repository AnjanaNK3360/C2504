----------------------------[Neha team]----------------------------[
-- QUERIES -06-08-2024: -- display all Users
SELECT * FROM Users;

-- display all Patients
SELECT * FROM Patients;

-- display Users UserID, Username, Role whose Role= 'Doctor'
SELECT UserID, Username, Role
FROM Users
WHERE Role= 'Doctor';

-- display employees PatientID,Name,Gender whose PatientID as 1
SELECT PatientID, Name, Gender
FROM Patients
WHERE PatientID=1;

--To find patients in descending order
SELECT PatientID, Name, Gender
FROM Patients
ORDER BY Name DESC;


---Sorting by using ordinal no....for the Condition column

SELECT MedicalHistoryId, PatientId, Condition, DiagnosisDate
FROM MedicalHistory
ORDER BY 3 DESC;



--To find patients having 'C' in their lastname
SELECT PatientID, Name, Gender
FROM Patients
WHERE Name Like '%c';

--To find patients having 'c' in their first name
SELECT PatientID, Name, Gender
FROM Patients
WHERE Name Like 'c%';


--To find age
SELECT '1995-11-10' BIRTH_DATE, getdate() TODAY_DATE, 
	DATEDIFF(YEAR, '1995-11-10', getdate()) AGE;

---Finding age greater than 37
SELECT   Name,DATEDIFF(YEAR,  Dob, getdate()) AGE
FROM Patients
WHERE DATEDIFF(YEAR,  Dob, getdate()) > 37;

---Finding age less than 37
SELECT   Name,DATEDIFF(YEAR,  Dob, getdate()) AGE
FROM Patients
WHERE DATEDIFF(YEAR,  Dob, getdate()) < 37;

---Finding age is 37
SELECT   Name,DATEDIFF(YEAR,  Dob, getdate()) AGE
FROM Patients
WHERE DATEDIFF(YEAR,  Dob, getdate()) = 37;

---Finding age is not 37
SELECT   Name,DATEDIFF(YEAR,  Dob, getdate()) AGE
FROM Patients
WHERE DATEDIFF(YEAR,  Dob, getdate()) <> 37;


---Finding age of patients who is either 37 or 32

SELECT   Name,DATEDIFF(YEAR,  Dob, getdate()) AGE
FROM Patients
WHERE DATEDIFF(YEAR,  Dob, getdate()) IN (37,32);

---Finding age of patients who is Neither 37 or 32

SELECT   Name,DATEDIFF(YEAR,  Dob, getdate()) AGE
FROM Patients
WHERE DATEDIFF(YEAR,  Dob, getdate()) NOT IN (37,32);


---Finding age of patients who is not in between 37 or 42

SELECT   Name,DATEDIFF(YEAR,  Dob, getdate()) AGE
FROM Patients
WHERE DATEDIFF(YEAR,  Dob, getdate()) NOT  BETWEEN 37 AND 42;

--To find patients having 'an' in their name
SELECT PatientID, Name, Gender
FROM Patients
WHERE Name LIKE '%AN%';

---Query to Get All Users with the Role of 'doctor'
SELECT * FROM Users WHERE Role = 'doctor';

--Query to fix 10:00pm as the last appointment time
SELECT AppointmentId, PatientId, DoctorId, Date, Time,10 as Last_Appointment_Time
FROM Appointments;




--------------[Sahla team]--------------
----Aggregators------

-- COUNT
SELECT COUNT(*) AS NUMBER_OF_USERS FROM Users;

SELECT COUNT(*) AS NUMBER_OF_PATIENTS FROM Patients;

SELECT COUNT(*) AS NUMBER_OF_MedicalHistory FROM MedicalHistory;
 
SELECT COUNT(*) AS NUMBER_OF_Appointments FROM Appointments;

SELECT COUNT(*) AS NUMBER_OF_Messages FROM Messages;

SELECT COUNT(*) AS NUMBER_OF_EHR_IntegrationLogs FROM EHR_IntegrationLogs;

SELECT COUNT(*) AS NUMBER_OF_Notifications FROM Notifications;

-- Sum of date of birth of patients
SELECT SUM( DATEDIFF( YEAR, Dob, GETDATE() ) ) AS SUM_AGE
FROM Patients;

SELECT SUM( DATEDIFF( YEAR, Dob, GETDATE() ) ) AS SUM_AGE
FROM Patients
WHERE PatientId IN(1,2);

--Average of date of birth of patients
SELECT AVG( DATEDIFF( YEAR, Dob, GETDATE() ) ) AS AVG_AGE
FROM Patients
WHERE PatientId IN(1,2);

--MIN date of birth
SELECT MIN(Dob) AS MIN_Dob FROM Patients;

SELECT * FROM Patients ORDER BY Dob;

SELECT MIN(DATEDIFF( YEAR, Dob, GETDATE())) AS MIN_AGE FROM Patients;

--MAX date of birth
SELECT MAX(Dob) AS MAX_Dob FROM Patients;

SELECT * FROM Patients ORDER BY Dob DESC;

SELECT MAX(DATEDIFF( YEAR, Dob, GETDATE())) AS MAX_AGE FROM Patients;


-- List the number of users by role.
SELECT Role, COUNT(*) AS NumberOfUsers
FROM Users
GROUP BY Role;

-- Count the number of patients by gender. 
SELECT Gender, COUNT(*) AS NumberOfPatients
FROM Patients
GROUP BY Gender;

-- Count the number of medical conditions recorded by condition type.
SELECT Condition, COUNT(*) AS NumberOfCases
FROM MedicalHistory
GROUP BY Condition;

-- Count the number of appointments scheduled by doctor.
SELECT DoctorId, COUNT(*) AS NumberOfAppointments
FROM Appointments
GROUP BY DoctorId;

-- Count the number of messages sent by each user. 
SELECT FromUserId, COUNT(*) AS NumberOfMessagesSent
FROM Messages
GROUP BY FromUserId;

-- Count the number of operations by status. 
SELECT Status, COUNT(*) AS NumberOfOperations
FROM EHR_IntegrationLogs
GROUP BY Status;

-- Count the number of notifications by read status. 
SELECT IsRead, COUNT(*) AS NumberOfNotifications
FROM Notifications
GROUP BY IsRead;

-- List roles with more than one user. 
SELECT Role, COUNT(*) AS NumberOfUsers
FROM Users
GROUP BY Role
HAVING COUNT(*) > 1;

-- Count the number of patients by gender where the count is greater than 2. 
SELECT Gender, COUNT(*) AS NumberOfPatients
FROM Patients
GROUP BY Gender
HAVING COUNT(*) > 2;

-- List conditions with more than one recorded case. 
SELECT Condition, COUNT(*) AS NumberOfCases
FROM MedicalHistory
GROUP BY Condition
HAVING COUNT(*) > 1;

-- List doctors who have more than two appointments scheduled. 
SELECT DoctorId, COUNT(*) AS NumberOfAppointments
FROM Appointments
GROUP BY DoctorId
HAVING COUNT(*) > 2;

-- List operations that failed more than once. 
SELECT Status, COUNT(*) AS NumberOfOperations
FROM EHR_IntegrationLogs
WHERE Status = 'failure'
GROUP BY Status
HAVING COUNT(*) > 1;

--  Retrieve all appointments for each doctor 
SELECT 
    u.UserId AS DoctorId,
    u.Username AS DoctorUsername,
    COUNT(a.AppointmentId) AS NumberOfAppointments,
    STRING_AGG(p.Name, ', ') AS PatientNames
FROM 
    Appointments a
JOIN 
    Patients p ON a.PatientId = p.PatientId
JOIN 
    Users u ON a.DoctorId = u.UserId
GROUP BY 
    u.UserId, u.Username
ORDER BY 
    u.UserId;

-- [Sharon team]
-- aggregators | compute min/max/sum/avg/count from many rows
--	COUNT | SUM | AVG | MIN | MAX

-- to find the number of patients
SELECT COUNT(*) AS NUMBER_OF_PATIENTS FROM PATIENTS;

-- to find the number of users
SELECT COUNT(*) AS NUMBER_OF_PATIENTS FROM USERS;

-- to find  sum of average age of patients
SELECT SUM( DATEDIFF( YEAR, DOB, GETDATE() ) )/ COUNT(*) AS AVG_AGE FROM patients;

-- to find average age 
SELECT AVG( DATEDIFF( YEAR, DOB, Getdate() ) ) AS AVG_AGE FROM Patients;


-- to find age of Patient with PatientId = 1
SELECT DATEDIFF( YEAR, DOB, Getdate() )  AS AGE FROM Patients where PatientId=1;


-- to find min age of patients
SELECT MIN( DATEDIFF( YEAR, DOB, GETDATE() ) ) AS MIN_AGE FROM PATIENTS;

-- to find max age of patients
SELECT MAX( DATEDIFF( YEAR, DOB, GETDATE() ) ) AS MAX_AGE FROM PATIENTS;


-- to display distint role of users
SELECT ROLE 
FROM USERS
GROUP BY ROLE;


-- to display number of distint role of users
SELECT COUNT(*), ROLE
FROM USERS
GROUP BY ROLE;

-- to display the IDs of doctors who have at least one appointment scheduled.
SELECT DoctorId, COUNT(*) AS NumberofAppointments
FROM Appointments
GROUP BY DoctorId
HAVING COUNT(*) > 0;


--total number of patients with condition "Hypertension"
SELECT Condition, COUNT(PatientId) AS PatientCount
FROM MedicalHistory
WHERE Condition = 'Hypertension'
GROUP BY Condition;


--average number of appointments per doctor
SELECT DoctorId, AVG(AppointmentCount) AS AvgAppointments 
FROM (SELECT DoctorId, COUNT(AppointmentId) AS AppointmentCount
FROM Appointments
GROUP BY DoctorId) AS DoctorAppointments
GROUP BY DoctorId;

--to find the name of the patient with  age 30 greater than 30 using HAVING
SELECT Name, DOB, DATEDIFF(YEAR, DOB, GETDATE()) AS Age
FROM Patients
GROUP BY Name, DOB
HAVING DATEDIFF(YEAR, DOB, GETDATE()) >=30

--to find the name of the patient with  age 30 greater than 30 using HAVING sort by name z-a
SELECT Name, DOB, DATEDIFF(YEAR, DOB, GETDATE()) AS Age
FROM Patients
GROUP BY Name, DOB
HAVING DATEDIFF(YEAR, DOB, GETDATE()) >=30
ORDER BY NAME DESC;

--to display number of patients with each condition
SELECT Condition, COUNT(PatientId) AS PatientCount
FROM MedicalHistory
GROUP BY Condition;

-- to find Patients with age less than average age
SELECT PatientId
FROM Patients
WHERE DATEDIFF(YEAR, DOB, GETDATE()) < (
    SELECT AVG(DATEDIFF(YEAR, DOB, GETDATE()))
    FROM Patients
);


--to find the name of the patient with age 30 greater than 30 using HAVING , then order by age first and then by name (GROUP BY, HAVING, ORDER BY)
SELECT Name, Dob, DATEDIFF(YEAR, DOB, GETDATE()) AS Age
FROM Patients
GROUP BY Name, DOB
HAVING DATEDIFF(YEAR, DOB, GETDATE()) >=30
order by age, name;

-- to display the date of appoinment slot of patient
SELECT patientid, date, time 
FROM Appointments
ORDER BY time;



--------------[Anugrah team]--------------
--SUB Query

--find patients who had  an appoinment BETWEEN '2024-08-10' AND '2024-08-14'

--SELECT * FROM Patients;
SELECT Name FROM Patients WHERE PatientId  IN(SELECT PatientId FROM Appointments WHERE Date BETWEEN '2024-08-10' AND '2024-08-14');



--LIST ALL DOCTORS WHO HAVE SCHEDULED APPOINTMENTS


--SELECT * FROM Users;
--SELECT * FROM Appointments;


SELECT 
    Username AS DoctorName
FROM 
    Users
WHERE 
    Role = 'doctor' AND UserId IN (SELECT DoctorId FROM Appointments);

--Get the number of unread notifications for each user.

SELECT 
    Username,
    (SELECT COUNT(*) FROM Notifications WHERE Notifications.UserId = Users.UserId AND IsRead = 0) AS UnreadNotifications
FROM 
    Users;

    --using GROUP BY

SELECT 
    Username, COUNT(*)  
    FROM Users INNER JOIN Notifications ON Users.UserId = Notifications.UserId
    WHERE isRead = 0 GROUP BY Username;
    

--List All Appointments with Patient and Doctor Details:

--Question: Write a query to list all appointments along with the patient's name, doctor's name, and the appointment date and time.
--Expected Output Columns: AppointmentId, PatientName, DoctorName, Date, Time


SELECT 
    a.AppointmentId,
    p.Name AS PatientName,
    u.Username AS DoctorName,
    a.Date,
    a.Time
FROM 
    Appointments a
    JOIN Patients p ON a.PatientId = p.PatientId
    JOIN Users u ON a.DoctorId = u.UserId;


--TO GET A LIST OF APPOINNTMENTS ALONG WITH PATIENT NAME


-- INNER JOIN KEY WORD SELECTS RECORDS THAT HAVE MATCHING VALUES IN BOTH TABLES.
-- LEFT INNER JOIN RETURNS ALL RECORDS FROM THE LEFT TABLES ALONG WITH MATCHING RECORD
-- RIGTH INNER JOIN RETURNS ALL RECORDS FROM THE RIGHT TABLES ALONG WITH MATCHING RECORD

SELECT 
    Appointments.AppointmentId,
    Patients.Name AS PatientName,
    Appointments.Date,
    Appointments.Time,
    Appointments.Reason,
    Appointments.Status
FROM 
    Appointments
INNER JOIN 
    Patients ON Appointments.PatientId = Patients.PatientId;

    --TO GET A LIST OF PATIENT NAME WITHOUT APPOINTMENT


    SELECT 
    Appointments.AppointmentId,
    Patients.Name AS PatientName,
    Appointments.Date,
    Appointments.Time,
    Appointments.Reason,
    Appointments.Status
FROM 
    Patients
LEFT JOIN 
    Appointments ON Patients.PatientId = Appointments.PatientId;


   -- Write a query to list EHR integration logs along with the patient's name.


SELECT 
    p.Name AS PatientName,
    e.EHRSystem,
    e.Operation
FROM 
    Patients p
    JOIN EHR_IntegrationLogs e ON p.PatientId = e.PatientId;

--------------[Anurag team]--------------
--INNER JOIN
SELECT u.Username, p.Name
FROM Users u
INNER JOIN Patients p ON u.UserId = p.PatientId; 


--LEFT JOIN
SELECT u.Username, p.Name
FROM Users u
LEFT JOIN Patients p ON u.UserId = p.PatientId; 

--RIGHT JOIN

SELECT u.Username, p.Name
FROM Users u
RIGHT JOIN Patients p ON u.UserId = p.PatientId; 

--CROSS JOIN

SELECT u.Username, p.Name
FROM Users u
CROSS JOIN Patients p;


-- #1
-- to display patients names of the appointments 
--   on dates between '2024-08-10' and '2024-08-10'
    -- query here

-- #2
-- the doctors scheduled appointments 
    -- query here

-- #3
-- each user's number of unread notifications :: use sub query in selectors 
        -- query here
        
-- each user's number of unread notifications :: use group by  
SELECT u.UserName, Count(*) as UnreadCount   
FROM Users as u 
    INNER JOIN Notifications n ON(u.UserID = n.UserID)
WHERE n.IsRead=0
Group By u.UserName; 
-- #4
-- 
